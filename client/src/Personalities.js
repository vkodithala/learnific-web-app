import React, { useState } from "react";
import './Personalities.css';
import backgroundImage from './signupBack.png';
import { useStepperContext } from "./contexts/StepperContext.js";
import 'tailwindcss/tailwind.css'
import { Link } from "react-router-dom";

const Personalities = () => {
  const [selectedWriter, setSelectedWriter] = useState(null);
  const { userData, setUserData } = useStepperContext();

  // Create a data structure for writers
  const glowEffectClass = "glow";
  const writersData = [
    {
      id: "writer1",
      name: "Dr. Isabella Clarke",
      image: "/IsabellaClarke.jpeg",
      description: "Greetings, I'm Professor Avery, your academic compass. Precision is my game, distilling complex research into concise, authoritative summaries. For the scholarly at heart, let's delve into discovery with elegance and expertise.",
      body: "Neural architecture search (NAS) is crucial for automating the design of deep neural networks. The paper \"MoSegNAS: Surrogate-assisted Multi-objective Neural Architecture Search for Real-time Semantic Segmentation\" proposes a surrogate-assisted multi-objective method to address challenges in applying NAS to real-time semantic segmentation tasks. It transforms the NAS task into a multi-objective optimization problem and achieves efficient architectures balancing segmentation accuracy and real-time inference speed. \nThe proposed method outperforms existing state-of-the-art architectures, both manually designed and automatically generated by other NAS methods, as confirmed through empirical evaluations on benchmark datasets. Notably, this approach is particularly effective in selecting candidate solutions for high-fidelity evaluation compared to conventional pre-screening methods…",
      header: "Efficient Neural Architecture Search for Real-Time Segmentation",
      imagePath: "/headerImg.png",
    },
    {
      id: "writer2",
      name: "Leo Hart",
      image: "/LeoHeart.jpeg",
      header: "Unleashing Smart Technology: Effortless Semantic Segmentation",
      body: "Imagine a world where machines can not only recognize objects in an image but also precisely outline each object without breaking a sweat. That's what semantic segmentation is all about. \n In a recent study titled \"MoSegNAS: Surrogate-assisted Multi-objective Neural Architecture Search for Real-time Semantic Segmentation,\" researchers Zhichao Lu, Ran Cheng, Shihua Huang, Haoming Zhang, Changxiao Qiu, and Fan Yang have set out on quite the quest! They're delving deep into the heart of neural architecture search (NAS) to automate the design of architectures for real-time semantic segmentation. What's NAS, you ask? Well, it's like having an AI architect that designs high-performing networks without needing human expertise. It's like having a self-driving car that builds its own roads as it goes!",
      description: "Hi, I'm Leo! Think of me as your research buddy who turns jargon into fun, digestible insights. Ready for some light-hearted yet enlightening chats about science? Let's make learning a breeze together!",
      imagePath: "/headerImg.png",
    },
    {
      id: "writer3",
      name: "Samira Byte",
      image: "/SamiraByte.jpeg",
      header: "Efficient Neural Architecture Search for Segmentation",
      body: "In the realm of computer vision, the architectural advancements in deep neural networks have led to groundbreaking progress in a wide array of tasks. One particularly promising avenue is neural architecture search (NAS), which aims to automate the design of architectures without relying solely on human expertise. While recent achievements in image classification have showcased the potential of NAS, its promises have yet to be thoroughly assessed in more challenging semantic segmentation tasks. Addressing the challenges of applying NAS to semantic segmentation—such as high-resolution images and real-time inference speed requirements—a new approach named MoSegNAS has been proposed. MoSegNAS utilizes surrogate-assisted multi-objective methods to transform the original NAS task into an ordinary multi-objective optimization problem. This approach effectively balances segmentation accuracy and inference speed, crucial for real-time applications like autonomous driving…",
      description: "Hey, I'm Samira. I deliver the essentials of research—quick and clear. If you're looking for straight-to-the-point updates, I'm your go-to. Let's skip the fluff and keep you ahead, efficiently.",
      imagePath: "/headerImg.png",
    },
  ];


  const handleWriterSelect = (writerId) => {
    const selectedWriterData = writersData.find(writer => writer.id == writerId);
    setSelectedWriter(selectedWriterData);
  };

  const submitAnswers = async () => {
    try {
      const response = await fetch('https://3.145.96.145:5000/submit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(userData),
      });
  
      if (response.ok) {
        console.log("Answers submitted successfully");
      } else {
        console.error("Failed to submit answers");
      }
  
  
    } catch (error) {
      console.error("Error submitting answers:", error);
    }
  };
  

  return (
    <div style={{
      backgroundImage: `url(${backgroundImage})`,
      backgroundSize: "cover",
      backgroundPosition: "center",
      minHeight: "100vh",
      display: "flex",
      flexDirection: "column",
      alignItems: "center",
      justifyContent: "center",
      padding: "20px",
    }}>
      {/* New header and description at the top */}
      <img
  src="/logo.png"
  alt="Logo"
  style={{
    width: "200px",
    height: "auto",
    marginBottom: "20px",
  }}
/>
      <p style={{
        fontSize: "18px",
        color: "#555",
        marginBottom: "40px",
      }}>Choose your content curator for your personalized newsletters...</p>

      <div className="writers">
        {writersData.map((writer) => (
          <div className={`writer ${selectedWriter && selectedWriter.id === writer.id ? glowEffectClass : ''}`} key={writer.id} onClick={() => handleWriterSelect(writer.id)}>
            <img src={writer.image} alt={writer.name}/>
            <h2>{writer.name}</h2>
            <p>
              {writer.description} {/* Show the entire description */}
            </p>
          </div>
        ))}
      </div>
      {selectedWriter && (
      <>
        <div className="max-w-2xl">
          <div className="example-newsletter">
            <div className="flex-col justify-center">
              <p className="text-3xl font-bold text-buttonColor mb-3">Example Newsletter by {selectedWriter.name}</p>
              
              <div style={{
                height: '283px',
                alignSelf: 'stretch',
                borderRadius: '20px 20px 0px 0px',
                background: `url(${selectedWriter.imagePath}) center/cover no-repeat`,
                objectFit: 'cover' // Added line
              }} />


              <p className="text-xl font-bold my-2 content-center">{selectedWriter.header}</p>
              <p className="my-2 text-slate-700">
                {selectedWriter.body}
              </p>

              <button className="font-semibold text-slate-100 px-20 py-2 mt-4 mb-2 rounded-3xl border-2 border-buttonColor bg-buttonColor mx-auto block">
      Read More
    </button>
    
              
            </div>
          </div>
        </div>
        <Link to="/end">
          <button className="mt-4 border-2 rounded-xl hover:bg-buttonColor hover:border-transparent hover:text-slate-100 font-semibold py-3 px-10 hover:bg-inherit border-buttonColor text-buttonColor transition duration-500" onClick={submitAnswers}>Confirm</button>
        </Link>
      </>
    )}
    </div>
  );
};

export default Personalities;
