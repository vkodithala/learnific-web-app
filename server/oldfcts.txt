const summarize = async (prompt, title, content) => {
    const llm = new OpenAI({
        openAIApiKey: process.env.OPENAI_API_KEY,
        temperature: .5
    })
    
    const splitter = new TokenTextSplitter({
      chunkSize: 10000,
      chunkOverlap: 0,
    });

    
    const output = await splitter.createDocuments([content]);
    
    const summaryTemplate = `
    Below you find the text of a few articles:
    --------
    ${output}
    --------
    You must create a bulleted list of all of the relevant information and statistics about ${prompt}. Your response should be AT MOST 500 characters.
    `;
    const llmResult = await llm.predict(summaryTemplate);
    return llmResult;
};

const generateScript = async (prompt, summarizedContent) => {
    //   const openai = new OpenAI({
    //     apiKey: process.env.OPENAI_API_KEY,
    //   });
    //   console.log("started");
      
    //   try {
    //     // Note this code is written in Node v18 which allows the await keyword at the global level.
    //     const response = await openai.chat.completions.create({
    //         model: "gpt-4",
    //         messages: [
    //         {
    //             "role": "user",
    //             "content": `You are Joe Rogan the podcaster.  Today you are doing a solo podcast on ${prompt}. I will provide some sources you can use in the podcast. Please write a humanized Joe Rogan podcastscript that relays this infomation while using occasional jokes joe rogan will use and make it insightful like his podcasts. here are the sources with the information: ${summarizedContent} The script of your podcast should be at least 2,000 characters long.`
    //         }
    //         ],
    //         temperature: 1,
    //         max_tokens: 4000,
    //         top_p: 1,
    //         frequency_penalty: 0,
    //         presence_penalty: 0,
    //     });
    //     return response;
    //     console.log(response);
    //   } catch (error) {
    //     console.log(`OpenAI Error: ${error.message}`);
    //   }
    const apiRequestBody = {
        "model": "gpt-3.5-turbo",
        "messages": [
            { role: "system",
            content: `You are Joe Rogan the podcaster.  Today you are doing a solo podcast on ${prompt}. I will provide some sources you can use in the podcast. Please write a humanized Joe Rogan podcastscript that relays this infomation while using occasional jokes joe rogan will use and make it insightful like his podcasts.` },
            { role: "user",
            content: summarizedContent }
        ]
    }
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify(apiRequestBody)
    })
    const responseData = await response.json();
    return responseData.choices[0].message.content;
};


const textBlocks = [];
        let startIndex = 0;
        while (startIndex < combinedSumm.length) {
            textBlocks.push(combinedSumm.substring(startIndex, startIndex + 1000));
            startIndex += 1000;
        }
        textBlocks.forEach((segment) => {
            tfidf.addDocument(segment);
        })
        const promptTokens = tokenizer.tokenize(prompt);
        let similarities = []
        tfidf.tfidfs(promptTokens, (i, measure) => {
            similarities.push(measure);
        })
        const similaritiesMap = {};
        for (let i=0; i<similarities.length; i++) {
            similaritiesMap[similarities[i]] = i;
        }
        similarities.sort(function (a, b) { return a-b })
        const relevantSumm = [];
        for (let i=0; i<5; i++) {
            const desiredRating = similarities[i];
            const indiceOfSumm = similaritiesMap[desiredRating];
            relevantSumm.push(textBlocks[indiceOfSumm]);
        }
        return relevantSumm;